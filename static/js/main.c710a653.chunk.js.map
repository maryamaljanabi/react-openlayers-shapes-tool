{"version":3,"sources":["components/Layout/Layout.js","components/Map/Map.js","pages/MapShapeToWkt/MapShapeToWkt.js","components/Map/MapHelpers.js","pages/WktToMap/WktToMap.js","pages/Home/TabsContainer.js","pages/Home/Home.js","App.js","index.js"],"names":["Layout","children","Map","returnRef","useState","map","setMap","mapElement","useRef","current","useEffect","mapTemp","OlMap","target","controls","defaultControls","extend","FullScreen","ZoomSlider","view","OlView","center","fromLonLat","zoom","minZoom","maxZoom","layers","LayerGroup","title","combine","visible","TileLayer","type","source","OSM","setTimeout","updateSize","ref","className","id","TextArea","Input","MapShapeToWkt","displayValue","setDisplayValue","clearShape","MapUtil","getLayerByName","getSource","clear","shapeToWkt","evt","geometry","feature","getGeometry","getType","fromCircle","wktRepresenation","WKT","writeGeometry","dataProjection","featureProjection","Boolean","allowDeselect","orientation","name","shape","drawType","digitizeLayerName","size","onDrawStart","onDrawEnd","content","placement","layout","Item","label","rows","value","readOnly","removeLayer","layerName","getLayers","forEach","layer","get","WktToMap","inputValue","setInputValue","inputError","setInputError","onChange","e","color","htmlType","onClick","preventDefault","wktFormat","geom","readGeometry","OlFeature","error","validateGeometry","wktFeature","poly","console","log","includes","vectorLayer","VectorLayer","VectorSource","features","style","Style","image","Circle","radius","fill","Fill","stroke","Stroke","width","set","addLayer","polygonExtent","getFeatures","getExtent","getView","fit","getSize","drawWktFeature","TabPane","Tabs","TabsContainer","defaultActiveKey","destroyInactiveTabPane","tab","Home","App","exact","path","component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c710a653.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Layout.scss\";\r\n\r\nexport default function Layout({ children }) {\r\n  return <div>{children}</div>;\r\n}\r\n","import { useEffect, useState, useRef } from \"react\";\r\nimport { fromLonLat } from \"ol/proj\";\r\nimport {\r\n  FullScreen,\r\n  ZoomSlider,\r\n  defaults as defaultControls,\r\n} from \"ol/control\";\r\nimport { OSM, BingMaps, Stamen, XYZ } from \"ol/source\";\r\nimport { Group as LayerGroup, Tile as TileLayer } from \"ol/layer\";\r\nimport LayerSwitcher from \"ol-layerswitcher\";\r\nimport OlMap from \"ol/Map\";\r\nimport OlView from \"ol/View\";\r\nimport \"ol/ol.css\";\r\nimport \"./Map.scss\";\r\nimport \"ol-layerswitcher/src/ol-layerswitcher.css\";\r\n\r\nconst Map = ({ returnRef = null }) => {\r\n  const [map, setMap] = useState(null);\r\n  const mapElement = useRef();\r\n  const mapRef = useRef();\r\n  mapRef.current = map;\r\n\r\n  useEffect(() => {\r\n    if (!map) {\r\n      const mapTemp = new OlMap({\r\n        target: mapElement.current,\r\n        controls: defaultControls().extend([\r\n          new FullScreen(),\r\n          new ZoomSlider(),\r\n          // new LayerSwitcher(),\r\n        ]),\r\n        view: new OlView({\r\n          //North America's center\r\n          center: fromLonLat([-100.437012, 47.650589]),\r\n          zoom: 5,\r\n          minZoom: 2,\r\n          maxZoom: 18,\r\n        }),\r\n        layers: [\r\n          new LayerGroup({\r\n            title: \"Main Layers\",\r\n            combine: false,\r\n            visible: true,\r\n            layers: [\r\n              new TileLayer({\r\n                title: \"OSM\",\r\n                type: \"base\",\r\n                visible: true,\r\n                source: new OSM(),\r\n              }),\r\n            ],\r\n          }),\r\n        ],\r\n      });\r\n\r\n      setTimeout(() => {\r\n        mapTemp.updateSize();\r\n      }, 0);\r\n\r\n      setMap(mapTemp);\r\n      if (typeof returnRef === \"function\") returnRef(mapTemp);\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <div ref={mapElement} className=\"map\">\r\n      <div id=\"popup-container\">\r\n        <div id=\"popup-content\">\r\n          <div id=\"popup-text\"></div>\r\n        </div>\r\n      </div>\r\n\r\n      <div id=\"tooltip-container\">\r\n        <div id=\"tooltip-content\"></div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Map;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { DigitizeButton, ToggleGroup } from \"@terrestris/react-geo\";\r\nimport { MapUtil, GeometryUtil } from \"@terrestris/ol-util\";\r\nimport \"./MapShapeToWkt.scss\";\r\nimport { Popover, Form, Input } from \"antd\";\r\nimport WKT from \"ol/format/WKT\";\r\nimport { fromCircle } from \"ol/geom/Polygon\";\r\nimport {\r\n  AiOutlineMinus,\r\n  BsCircle,\r\n  BiRectangle,\r\n  BiPolygon,\r\n  FiEdit,\r\n} from \"react-icons/all\";\r\nconst { TextArea } = Input;\r\n\r\nexport default function MapShapeToWkt({ map }) {\r\n  const [displayValue, setDisplayValue] = useState(null);\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      if (map) clearShape();\r\n    };\r\n  }, []);\r\n\r\n  const clearShape = () => {\r\n    const shapeLayer = MapUtil.getLayerByName(map, \"shapeLayer\");\r\n    shapeLayer.getSource().clear();\r\n  };\r\n\r\n  const shapeToWkt = (evt) => {\r\n    let feature = evt.feature;\r\n    let geometry;\r\n\r\n    const featureType = feature.getGeometry().getType();\r\n    if (featureType === \"Circle\") {\r\n      geometry = fromCircle(feature.getGeometry());\r\n    } else {\r\n      geometry = feature.getGeometry();\r\n    }\r\n\r\n    const format = new WKT();\r\n\r\n    const wktRepresenation = format.writeGeometry(geometry, {\r\n      dataProjection: \"EPSG:4326\",\r\n      featureProjection: \"EPSG:3857\",\r\n    });\r\n\r\n    setDisplayValue(wktRepresenation);\r\n  };\r\n\r\n  return (\r\n    <div className=\"map-to-wkt\">\r\n      {Boolean(map) && (\r\n        <ToggleGroup\r\n          allowDeselect={false}\r\n          orientation={\"horizontal\"}\r\n          className=\"map-to-wkt-btns\"\r\n        >\r\n          <DigitizeButton\r\n            name=\"drawLine\"\r\n            map={map}\r\n            shape=\"circle\"\r\n            drawType=\"LineString\"\r\n            digitizeLayerName=\"shapeLayer\"\r\n            size=\"large\"\r\n            onDrawStart={clearShape}\r\n            onDrawEnd={shapeToWkt}\r\n          >\r\n            <Popover content=\"Draw line\" placement=\"top\">\r\n              <AiOutlineMinus />\r\n            </Popover>\r\n          </DigitizeButton>\r\n\r\n          <DigitizeButton\r\n            name=\"drawPolygon\"\r\n            map={map}\r\n            drawType=\"Polygon\"\r\n            digitizeLayerName=\"shapeLayer\"\r\n            shape=\"circle\"\r\n            size=\"large\"\r\n            onDrawStart={clearShape}\r\n            onDrawEnd={shapeToWkt}\r\n          >\r\n            <Popover content=\"Draw Polygon\" placement=\"top\">\r\n              <BiPolygon />\r\n            </Popover>\r\n          </DigitizeButton>\r\n\r\n          <DigitizeButton\r\n            name=\"drawRectangle\"\r\n            map={map}\r\n            drawType=\"Rectangle\"\r\n            digitizeLayerName=\"shapeLayer\"\r\n            shape=\"circle\"\r\n            size=\"large\"\r\n            onDrawStart={clearShape}\r\n            onDrawEnd={shapeToWkt}\r\n          >\r\n            <Popover content=\"Draw Regtangle\" placement=\"top\">\r\n              <BiRectangle />\r\n            </Popover>\r\n          </DigitizeButton>\r\n\r\n          <DigitizeButton\r\n            name=\"drawCircle\"\r\n            map={map}\r\n            drawType=\"Circle\"\r\n            digitizeLayerName=\"shapeLayer\"\r\n            shape=\"circle\"\r\n            size=\"large\"\r\n            onDrawStart={clearShape}\r\n            onDrawEnd={shapeToWkt}\r\n          >\r\n            <Popover content=\"Draw Circle\" placement=\"top\">\r\n              <BsCircle />\r\n            </Popover>\r\n          </DigitizeButton>\r\n\r\n          {/* <DigitizeButton\r\n            name=\"selectAndModify\"\r\n            digitizeLayerName=\"shapeLayer\"\r\n            map={map}\r\n            editType=\"Edit\"\r\n            shape=\"circle\"\r\n            size=\"large\"\r\n          >\r\n            <Popover content=\"Edit Shape\" placement=\"top\">\r\n              <FiEdit />\r\n            </Popover>\r\n          </DigitizeButton> */}\r\n        </ToggleGroup>\r\n      )}\r\n\r\n      <Form layout=\"vertical\">\r\n        <Form.Item label=\"WKT\">\r\n          <TextArea rows={6} value={displayValue} readOnly />\r\n        </Form.Item>\r\n      </Form>\r\n    </div>\r\n  );\r\n}\r\n","import OlFeature from \"ol/Feature\";\r\nimport VectorSource from \"ol/source/Vector\";\r\nimport VectorLayer from \"ol/layer/Vector\";\r\nimport WKT from \"ol/format/WKT\";\r\nimport { Style, Fill, Stroke, Circle, Icon } from \"ol/style\";\r\n\r\nimport \"ol/ol.css\";\r\nimport \"ol-layerswitcher/src/ol-layerswitcher.css\";\r\n\r\nexport const drawWktFeature = (map, wktFeature) => {\r\n  removeLayer(map, \"wktLayer\");\r\n  const wktFormat = new WKT();\r\n  const geometry = wktFormat.readGeometry(wktFeature, {\r\n    dataProjection: \"EPSG:4326\",\r\n    featureProjection: \"EPSG:3857\",\r\n  });\r\n\r\n  if (map) {\r\n    const poly = new OlFeature({\r\n      geometry: geometry,\r\n    });\r\n\r\n    console.log(poly.getGeometry().getType().includes(\"Point\"));\r\n\r\n    const vectorLayer = new VectorLayer({\r\n      title: \"WKT Layer\",\r\n      source: new VectorSource({\r\n        features: [poly],\r\n      }),\r\n      style: poly.getGeometry().getType().includes(\"Point\")\r\n        ? new Style({\r\n            image: new Circle({\r\n              radius: 7,\r\n              fill: new Fill({ color: \"rgba(0, 98, 255, 0.4)\" }),\r\n              stroke: new Stroke({\r\n                color: \"#0000ff\",\r\n                width: 2,\r\n              }),\r\n            }),\r\n          })\r\n        : new Style({\r\n            fill: new Fill({\r\n              color: \"rgba(0, 98, 255, 0.4)\",\r\n            }),\r\n            stroke: new Stroke({\r\n              color: \"#0000ff\",\r\n              width: 2,\r\n            }),\r\n          }),\r\n    });\r\n\r\n    vectorLayer.set(\"name\", \"wktLayer\");\r\n\r\n    map.addLayer(vectorLayer);\r\n    const polygonExtent = vectorLayer\r\n      .getSource()\r\n      .getFeatures()[0]\r\n      .getGeometry()\r\n      .getExtent();\r\n    map.getView().fit(polygonExtent, map.getSize());\r\n  }\r\n};\r\n\r\nexport const validateGeometry = (geometry) => {\r\n  const wktFormat = new WKT();\r\n  try {\r\n    const geom = wktFormat.readGeometry(geometry, {\r\n      dataProjection: \"EPSG:4326\",\r\n      featureProjection: \"EPSG:3857\",\r\n    });\r\n    const poly = new OlFeature({\r\n      geometry: geom,\r\n    });\r\n\r\n    return poly.getGeometry().getType();\r\n  } catch (error) {\r\n    return null;\r\n  }\r\n};\r\n\r\n//remove layer from map by name\r\nexport const removeLayer = (map, layerName) => {\r\n  map.getLayers().forEach((layer) => {\r\n    if (layer && layer.get(\"name\") === layerName) {\r\n      map.removeLayer(layer);\r\n    }\r\n  });\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Form, Input, Button, Tag } from \"antd\";\r\nimport {\r\n  drawWktFeature,\r\n  removeLayer,\r\n  validateGeometry,\r\n} from \"../../components/Map/MapHelpers\";\r\nimport \"./WktToMap.scss\";\r\nconst { TextArea } = Input;\r\n\r\nexport default function WktToMap({ map }) {\r\n  const [inputValue, setInputValue] = useState(\"\");\r\n  const [inputError, setInputError] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      if (map) removeLayer(map, \"wktLayer\");\r\n    };\r\n  }, []);\r\n\r\n  const inputValueChangeHandler = (e) => {\r\n    setInputValue(e.target.value);\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (map) {\r\n      if (inputValue) {\r\n        const validation = validateGeometry(inputValue);\r\n        if (validation) {\r\n          drawWktFeature(map, inputValue);\r\n          setInputError(\"\");\r\n        } else {\r\n          removeLayer(map, \"wktLayer\");\r\n          setInputError(\"The submitted geometry is not a valid WKT\");\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleClearMap = () => {\r\n    if (map) {\r\n      removeLayer(map, \"wktLayer\");\r\n      setInputError(\"\");\r\n      setInputValue(\"\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"wkt-to-map\">\r\n      <Form layout=\"vertical\">\r\n        <Form.Item label=\"WKT\">\r\n          <TextArea rows={6} onChange={inputValueChangeHandler} />\r\n        </Form.Item>\r\n\r\n        {Boolean(inputError) && (\r\n          <Tag color=\"error\" className=\"full-width error-tag\">\r\n            {inputError}\r\n          </Tag>\r\n        )}\r\n\r\n        <div className=\"two-col-btns-wrapper\">\r\n          <Button htmlType=\"submit\" type=\"primary\" onClick={handleSubmit}>\r\n            Draw On Map\r\n          </Button>\r\n          <Button htmlType=\"button\" onClick={handleClearMap}>\r\n            Clear Map\r\n          </Button>\r\n        </div>\r\n      </Form>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { Tabs } from \"antd\";\r\nimport MapShapeToWkt from \"../MapShapeToWkt/MapShapeToWkt\";\r\nimport WktToMap from \"../WktToMap/WktToMap\";\r\nconst { TabPane } = Tabs;\r\n\r\nexport default function TabsContainer({ map }) {\r\n  return (\r\n    <div className=\"tabs-container\">\r\n      <Tabs\r\n        defaultActiveKey=\"1\"\r\n        type=\"card\"\r\n        size=\"large\"\r\n        destroyInactiveTabPane={true}\r\n      >\r\n        <TabPane tab=\"WKT to Map\" key=\"1\">\r\n          <WktToMap map={map} />\r\n        </TabPane>\r\n        <TabPane tab=\"Map Shape to Wkt\" key=\"2\">\r\n          <MapShapeToWkt map={map} />\r\n        </TabPane>\r\n      </Tabs>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport Map from \"../../components/Map/Map\";\r\nimport \"./Home.scss\";\r\nimport TabsContainer from \"./TabsContainer\";\r\n\r\nexport default function Home() {\r\n  const [map, setMap] = useState(null);\r\n  return (\r\n    <div>\r\n      <Map returnRef={setMap} />\r\n      <TabsContainer map={map} />\r\n      <div className=\"footer\">© 2021 Maryam Aljanabi</div>\r\n    </div>\r\n  );\r\n}\r\n","import { Switch, Route } from \"react-router-dom\";\nimport Layout from \"./components/Layout/Layout\";\nimport Home from \"./pages/Home/Home\";\n\nfunction App() {\n  return (\n    <Layout>\n      <Switch>\n        <Route exact path={[\"/home\", \"/\"]} component={Home} />\n      </Switch>\n    </Layout>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport \"./assets/styles/index.scss\";\nimport App from \"./App\";\nimport \"antd/dist/antd.css\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}